{"version":3,"file":"static/js/244.78f904d8.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/MoviesApi.js","services/genreList.js","services/normalizationObj.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewsContainer = styled.div`\n  padding: 20px;\n`;\n\nexport const ReviewsList = styled.ul`\n  font-size: 24px;\n`;\n\nexport const ReviewsItem = styled.li`\n  &:not(:last-of-type) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const ReviewsData = styled.p`\n  font-size: 18px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesReviews } from 'services/MoviesApi';\nimport {\n  ReviewsContainer,\n  ReviewsList,\n  ReviewsItem,\n  ReviewsData,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const response = await fetchMoviesReviews(Number(movieId));\n        console.log(response);\n        setReviews(response);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <ReviewsContainer>\n      {reviews.length !== 0 ? (\n        <ReviewsList>\n          {reviews &&\n            reviews.map(({ content, author_details, id }) => {\n              return (\n                <ReviewsItem key={id}>\n                  <ReviewsData>\n                    Author:{' '}\n                    {author_details.name ? author_details.name : 'Anonymous'}\n                  </ReviewsData>\n                  <ReviewsData>Rating: {author_details.rating}</ReviewsData>\n                  <ReviewsData>{content}</ReviewsData>\n                </ReviewsItem>\n              );\n            })}\n        </ReviewsList>\n      ) : (\n        <ReviewsData>We don't have any reviews for this movie</ReviewsData>\n      )}\n    </ReviewsContainer>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport {\n  normalizationMovieObj,\n  normalizationMoviesDetails,\n} from './normalizationObj';\n\nconst API_KEY = 'e5517ae4303f5ec2cd4c7059ec556fc9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?`);\n  const response = normalizationMovieObj(data.results);\n  return response;\n};\n\nexport const fetchMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}?`);\n  const response = normalizationMoviesDetails(data);\n  return response;\n};\n\nexport const fetchMoviesBySearch = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n  const response = normalizationMovieObj(data.results);\n  return response;\n};\n\nexport const fetchMoviesCredits = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const fetchMoviesReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`);\n  return data.results;\n};\n","export const genreList = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n","import { genreList } from './genreList';\nimport noImg from '../images/noImageAvailable.jpg';\n\nconst getGenreArray = genre_ids =>\n  genre_ids.map(el => genreList[`${el}`]).join(', ');\n\nconst getGenreArrayLibrary = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n  !imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\n// -------------------------------------------------------------\nexport const normalizationMovieObj = movies => {\n  return movies.map(\n    ({\n      genres = null,\n      genre_ids = null,\n      id,\n      original_title,\n      overview,\n      popularity,\n      poster_path,\n      release_date,\n      vote_average,\n      vote_count,\n      original_name,\n    }) => ({\n      genre: genre_ids\n        ? getGenreArray(genre_ids)\n        : getGenreArrayLibrary(genres),\n      id: id,\n      title: original_title ? original_title : original_name,\n      about: overview,\n      popularity: popularity,\n      img: getImgPath(poster_path),\n      releaseDate: release_date ? getDate(release_date) : '',\n      vote: vote_average,\n      votes: vote_count,\n    })\n  );\n};\n\nexport const normalizationMoviesDetails = ({\n  poster_path,\n  title,\n  original_title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  return {\n    genre: getGenreArrayLibrary(genres),\n    title: original_title ? original_title : title,\n    about: overview,\n    img: getImgPath(poster_path),\n    releaseDate: release_date ? getDate(release_date) : '',\n    vote: vote_average,\n  };\n};\n"],"names":["ReviewsContainer","styled","ReviewsList","ReviewsItem","ReviewsData","useState","reviews","setReviews","movieId","useParams","useEffect","getReviews","fetchMoviesReviews","Number","response","console","log","message","length","map","content","author_details","id","name","rating","axios","api_key","language","fetchTrendingMovies","data","normalizationMovieObj","results","fetchMoviesById","normalizationMoviesDetails","fetchMoviesBySearch","query","fetchMoviesCredits","cast","genreList","getGenreArray","genre_ids","el","join","getGenreArrayLibrary","genres","getImgPath","imgPath","noImg","getDate","date","slice","movies","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","original_name","genre","title","about","img","releaseDate","vote","votes"],"sourceRoot":""}