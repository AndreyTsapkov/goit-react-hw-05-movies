{"version":3,"file":"static/js/778.c185205c.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/MoviesPage/MoviesPage.styled.jsx","pages/MoviesPage/MoviesPage.jsx","services/MoviesApi.js","services/genreList.js","services/normalizationObj.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesTitleStyled = styled.h3`\n  margin-bottom: 30px;\n  margin-top: 30px;\n  font-size: 28px;\n  text-align: center;\n`;\n\nexport const MoviesListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px 20px;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const MoviesItemStyled = styled(Link)`\n  width: 100%;\n  flex-basis: calc(100% / 5 - 20px);\n\n  & img {\n    width: 100%;\n  }\n`;\n","import {\n  MoviesTitleStyled,\n  MoviesListStyled,\n  MoviesItemStyled,\n} from './MoviesList.styled';\nimport { useLocation } from 'react-router-dom';\nimport { PropTypes } from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesListStyled>\n      {movies &&\n        movies.map(({ id, img, title, name }) => (\n          <MoviesItemStyled\n            to={`/moviespage/${id}`}\n            key={id}\n            state={{ from: location }}\n          >\n            <img src={img} alt={title} />\n            <MoviesTitleStyled>{title ? title : name}</MoviesTitleStyled>\n          </MoviesItemStyled>\n        ))}\n    </MoviesListStyled>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const MoviesPageContainer = styled.form`\n  padding-top: 30px;\n  padding-bottom: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const MoviesPageInput = styled.input`\n  padding: 10px;\n  min-width: 300px;\n  height: 40px;\n\n  &:active,\n  &:focus {\n    outline: 1px solid black;\n  }\n`;\n\nexport const MoviesPageButton = styled.button`\n  height: 64px;\n  width: 64px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { ImSearch } from 'react-icons/im';\nimport { fetchMoviesBySearch } from 'services/MoviesApi';\nimport MoviesList from 'components/MoviesList';\nimport {\n  MoviesPageContainer,\n  MoviesPageInput,\n  MoviesPageButton,\n} from './MoviesPage.styled';\n\nconst MoviesPage = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams({});\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    setSearchQuery(\n      e.currentTarget.elements.searchQuery.value.toLowerCase().trim()\n    );\n    setSearchParams({\n      query: e.currentTarget.elements.searchQuery.value.toLowerCase().trim(),\n    });\n  };\n\n  const currentQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (!currentQuery) {\n      console.log('no movies');\n    }\n  }, [currentQuery]);\n\n  useEffect(() => {\n    if (searchQuery !== '') {\n      const getMovieBySearch = async () => {\n        try {\n          const response = await fetchMoviesBySearch(searchQuery);\n          console.log(response);\n          setMovies(response);\n        } catch (error) {\n          setError(error.message);\n          console.log(error.message);\n        }\n      };\n      getMovieBySearch();\n    } else if (currentQuery) {\n      const getMovieBySearch = async () => {\n        try {\n          const response = await fetchMoviesBySearch(currentQuery);\n          console.log(response);\n          setMovies(response);\n        } catch (error) {\n          setError(error.message);\n          console.log(error.message);\n        }\n      };\n      getMovieBySearch();\n    }\n\n    return;\n  }, [searchQuery, currentQuery]);\n\n  return (\n    <>\n      <MoviesPageContainer onSubmit={handleSubmit}>\n        <MoviesPageInput\n          name=\"searchQuery\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search...\"\n        />\n        <MoviesPageButton type=\"submit\">\n          <ImSearch size=\"30\" color=\"#fff\" />\n        </MoviesPageButton>\n      </MoviesPageContainer>\n      {!error ? (\n        <MoviesList movies={movies} />\n      ) : (\n        <p>No results found for '{searchQuery}'</p>\n      )}\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\nimport {\n  normalizationMovieObj,\n  normalizationMoviesDetails,\n} from './normalizationObj';\n\nconst API_KEY = 'e5517ae4303f5ec2cd4c7059ec556fc9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?`);\n  const response = normalizationMovieObj(data.results);\n  return response;\n};\n\nexport const fetchMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}?`);\n  const response = normalizationMoviesDetails(data);\n  return response;\n};\n\nexport const fetchMoviesBySearch = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n  const response = normalizationMovieObj(data.results);\n  return response;\n};\n\nexport const fetchMoviesCredits = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const fetchMoviesReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`);\n  return data.results;\n};\n","export const genreList = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n","import { genreList } from './genreList';\nimport noImg from '../images/noImageAvailable.jpg';\n\nconst getGenreArray = genre_ids =>\n  genre_ids.map(el => genreList[`${el}`]).join(', ');\n\nconst getGenreArrayLibrary = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n  !imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\n// -------------------------------------------------------------\nexport const normalizationMovieObj = movies => {\n  return movies.map(\n    ({\n      genres = null,\n      genre_ids = null,\n      id,\n      original_title,\n      overview,\n      popularity,\n      poster_path,\n      release_date,\n      vote_average,\n      vote_count,\n      original_name,\n    }) => ({\n      genre: genre_ids\n        ? getGenreArray(genre_ids)\n        : getGenreArrayLibrary(genres),\n      id: id,\n      title: original_title ? original_title : original_name,\n      about: overview,\n      popularity: popularity,\n      img: getImgPath(poster_path),\n      releaseDate: release_date ? getDate(release_date) : '',\n      vote: vote_average,\n      votes: vote_count,\n    })\n  );\n};\n\nexport const normalizationMoviesDetails = ({\n  poster_path,\n  title,\n  original_title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  return {\n    genre: getGenreArrayLibrary(genres),\n    title: original_title ? original_title : title,\n    about: overview,\n    img: getImgPath(poster_path),\n    releaseDate: release_date ? getDate(release_date) : '',\n    vote: vote_average,\n  };\n};\n"],"names":["MoviesTitleStyled","styled","MoviesListStyled","MoviesItemStyled","Link","movies","location","useLocation","map","id","img","title","name","to","state","from","src","alt","MoviesPageContainer","MoviesPageInput","MoviesPageButton","useState","searchQuery","setSearchQuery","setMovies","error","setError","useSearchParams","searchParams","setSearchParams","currentQuery","get","useEffect","console","log","getMovieBySearch","fetchMoviesBySearch","response","message","onSubmit","e","preventDefault","currentTarget","elements","value","toLowerCase","trim","query","type","autoComplete","autoFocus","placeholder","size","color","MoviesList","axios","api_key","language","fetchTrendingMovies","data","normalizationMovieObj","results","fetchMoviesById","normalizationMoviesDetails","fetchMoviesCredits","cast","fetchMoviesReviews","genreList","getGenreArray","genre_ids","el","join","getGenreArrayLibrary","genres","getImgPath","imgPath","noImg","getDate","date","slice","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","original_name","genre","about","releaseDate","vote","votes"],"sourceRoot":""}