{"version":3,"file":"static/js/93.4ba6106d.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/MoviesApi.js","services/genreList.js","services/normalizationObj.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastContainer = styled.div`\n  padding: 20px;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const CastItem = styled.li`\n  width: 100%;\n  height: 400px;\n  flex-basis: calc(100% / 4 - 15px);\n\n  & img {\n    width: 100%;\n    max-height: 300px;\n    object-fit: cover;\n  }\n`;\n\nexport const CastData = styled.p`\n  margin-top: 10px;\n  font-size: 24px;\n  font-weight: 600;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesCredits } from 'services/MoviesApi';\nimport { getImgPath } from 'services/normalizationObj';\nimport { CastContainer, CastList, CastItem, CastData } from './Cast.styled';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        const response = await fetchMoviesCredits(Number(movieId));\n        console.log(response);\n        setCredits(response);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return (\n    <CastContainer>\n      {credits.length ? (\n        <CastList>\n          {credits &&\n            credits.map(({ name, profile_path, character, id }) => {\n              const img = getImgPath(profile_path);\n              return (\n                <CastItem key={id}>\n                  <img src={img} alt={name} />\n                  <CastData>{name}</CastData>\n                  <CastData>Character: {character}</CastData>\n                </CastItem>\n              );\n            })}\n        </CastList>\n      ) : (\n        <CastData>\n          We don`t have information about the actors of this movie\n        </CastData>\n      )}\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport {\n  normalizationMovieObj,\n  normalizationMoviesDetails,\n} from './normalizationObj';\n\nconst API_KEY = 'e5517ae4303f5ec2cd4c7059ec556fc9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?`);\n  const response = normalizationMovieObj(data.results);\n  return response;\n};\n\nexport const fetchMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}?`);\n  const response = normalizationMoviesDetails(data);\n  return response;\n};\n\nexport const fetchMoviesBySearch = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n  const response = normalizationMovieObj(data.results);\n  return response;\n};\n\nexport const fetchMoviesCredits = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const fetchMoviesReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`);\n  return data.results;\n};\n","export const genreList = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n","import { genreList } from './genreList';\nimport noImg from '../images/noImageAvailable.jpg';\n\nconst getGenreArray = genre_ids =>\n  genre_ids.map(el => genreList[`${el}`]).join(', ');\n\nconst getGenreArrayLibrary = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n  !imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\n// -------------------------------------------------------------\nexport const normalizationMovieObj = movies => {\n  return movies.map(\n    ({\n      genres = null,\n      genre_ids = null,\n      id,\n      original_title,\n      overview,\n      popularity,\n      poster_path,\n      release_date,\n      vote_average,\n      vote_count,\n      original_name,\n    }) => ({\n      genre: genre_ids\n        ? getGenreArray(genre_ids)\n        : getGenreArrayLibrary(genres),\n      id: id,\n      title: original_title ? original_title : original_name,\n      about: overview,\n      popularity: popularity,\n      img: getImgPath(poster_path),\n      releaseDate: release_date ? getDate(release_date) : '',\n      vote: vote_average,\n      votes: vote_count,\n    })\n  );\n};\n\nexport const normalizationMoviesDetails = ({\n  poster_path,\n  title,\n  original_title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  return {\n    genre: getGenreArrayLibrary(genres),\n    title: original_title ? original_title : title,\n    about: overview,\n    img: getImgPath(poster_path),\n    releaseDate: release_date ? getDate(release_date) : '',\n    vote: vote_average,\n  };\n};\n"],"names":["CastContainer","styled","CastList","CastItem","CastData","useState","credits","setCredits","movieId","useParams","useEffect","getCast","fetchMoviesCredits","Number","response","console","log","message","length","map","name","profile_path","character","id","img","getImgPath","src","alt","axios","api_key","language","fetchTrendingMovies","data","normalizationMovieObj","results","fetchMoviesById","normalizationMoviesDetails","fetchMoviesBySearch","query","cast","fetchMoviesReviews","genreList","getGenreArray","genre_ids","el","join","getGenreArrayLibrary","genres","imgPath","noImg","getDate","date","slice","movies","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","original_name","genre","title","about","releaseDate","vote","votes"],"sourceRoot":""}