{"version":3,"file":"static/js/223.61a346d0.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage/HomePage.styled.jsx","pages/HomePage/HomePage.jsx","services/MoviesApi.js","services/genreList.js","services/normalizationObj.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesTitleStyled = styled.h3`\n  margin-bottom: 30px;\n  margin-top: 30px;\n  font-size: 28px;\n  text-align: center;\n`;\n\nexport const MoviesListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px 20px;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const MoviesItemStyled = styled(Link)`\n  width: 100%;\n  flex-basis: calc(100% / 5 - 20px);\n\n  & img {\n    width: 100%;\n  }\n`;\n","import {\n  MoviesTitleStyled,\n  MoviesListStyled,\n  MoviesItemStyled,\n} from './MoviesList.styled';\nimport { useLocation } from 'react-router-dom';\nimport { PropTypes } from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesListStyled>\n      {movies &&\n        movies.map(({ id, img, title, name }) => (\n          <MoviesItemStyled\n            to={`/moviespage/${id}`}\n            key={id}\n            state={{ from: location }}\n          >\n            <img src={img} alt={title} />\n            <MoviesTitleStyled>{title ? title : name}</MoviesTitleStyled>\n          </MoviesItemStyled>\n        ))}\n    </MoviesListStyled>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const HomePageTitle = styled.h2`\n  margin-bottom: 30px;\n  margin-top: 30px;\n  font-size: 36px;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { HomePageTitle } from './HomePage.styled';\nimport MoviesList from 'components/MoviesList';\nimport { fetchTrendingMovies } from 'services/MoviesApi';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const movies = await fetchTrendingMovies();\n        setMovies(movies);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchMovies();\n  }, []);\n\n  return (\n    <>\n      <HomePageTitle>Trending Movies</HomePageTitle>\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\nimport {\n  normalizationMovieObj,\n  normalizationMoviesDetails,\n} from './normalizationObj';\n\nconst API_KEY = 'e5517ae4303f5ec2cd4c7059ec556fc9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/all/day?`);\n  const response = normalizationMovieObj(data.results);\n  return response;\n};\n\nexport const fetchMoviesById = async id => {\n  const { data } = await axios.get(`/movie/${id}?`);\n  const response = normalizationMoviesDetails(data);\n  return response;\n};\n\nexport const fetchMoviesBySearch = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}&page=1`);\n  const response = normalizationMovieObj(data.results);\n  return response;\n};\n\nexport const fetchMoviesCredits = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`);\n  return data.cast;\n};\n\nexport const fetchMoviesReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`);\n  return data.results;\n};\n","export const genreList = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};\n","import { genreList } from './genreList';\nimport noImg from '../images/noImageAvailable.jpg';\n\nconst getGenreArray = genre_ids =>\n  genre_ids.map(el => genreList[`${el}`]).join(', ');\n\nconst getGenreArrayLibrary = genres => genres.map(el => el.name).join(', ');\n\nexport const getImgPath = imgPath =>\n  !imgPath ? `${noImg}` : `https://image.tmdb.org/t/p/w500/${imgPath}`;\n\nconst getDate = date => (!date ? date : date.slice(0, 4));\n\n// -------------------------------------------------------------\nexport const normalizationMovieObj = movies => {\n  return movies.map(\n    ({\n      genres = null,\n      genre_ids = null,\n      id,\n      original_title,\n      overview,\n      popularity,\n      poster_path,\n      release_date,\n      vote_average,\n      vote_count,\n      original_name,\n    }) => ({\n      genre: genre_ids\n        ? getGenreArray(genre_ids)\n        : getGenreArrayLibrary(genres),\n      id: id,\n      title: original_title ? original_title : original_name,\n      about: overview,\n      popularity: popularity,\n      img: getImgPath(poster_path),\n      releaseDate: release_date ? getDate(release_date) : '',\n      vote: vote_average,\n      votes: vote_count,\n    })\n  );\n};\n\nexport const normalizationMoviesDetails = ({\n  poster_path,\n  title,\n  original_title,\n  vote_average,\n  overview,\n  genres,\n  release_date,\n}) => {\n  return {\n    genre: getGenreArrayLibrary(genres),\n    title: original_title ? original_title : title,\n    about: overview,\n    img: getImgPath(poster_path),\n    releaseDate: release_date ? getDate(release_date) : '',\n    vote: vote_average,\n  };\n};\n"],"names":["MoviesTitleStyled","styled","MoviesListStyled","MoviesItemStyled","Link","movies","location","useLocation","map","id","img","title","name","to","state","from","src","alt","HomePageTitle","useState","setMovies","useEffect","fetchMovies","fetchTrendingMovies","console","log","message","MoviesList","axios","api_key","language","data","response","normalizationMovieObj","results","fetchMoviesById","normalizationMoviesDetails","fetchMoviesBySearch","query","fetchMoviesCredits","cast","fetchMoviesReviews","genreList","getGenreArray","genre_ids","el","join","getGenreArrayLibrary","genres","getImgPath","imgPath","noImg","getDate","date","slice","original_title","overview","popularity","poster_path","release_date","vote_average","vote_count","original_name","genre","about","releaseDate","vote","votes"],"sourceRoot":""}